import express = require("express");
import { User } from "./models/user.model";
import { Product } from "./models/product.model";

const router = express.Router();

// Verbesserte Fehlerbehandlung
const handleError = (res: express.Response, error: unknown, context: string) => {
    console.error(`Error in ${context}:`, error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    res.status(500).json({
        error: errorMessage,
        context: context
    });
};

// GET all users
router.get("/", async (_req, res) => {
    try {
        const users = await User.find().populate({
            path: "products.product",
            model: "Product",
            select: "productNr name price category" // Nur relevante Felder
        });
        res.json(users);
    } catch (err) {
        handleError(res, err, "GET all users");
    }
});

// POST add product to user cart by productNr
router.post("/:userId/add-product", async (req, res) => {
    const { productNr, amount = 1 } = req.body; // Default amount = 1
    const { userId } = req.params;

    try {
        // Validierung
        if (!productNr || isNaN(amount)) {
            return res.status(400).json({
                error: "Invalid input",
                details: {
                    productNr: "Required, must be a number",
                    amount: "Optional, must be a number"
                }
            });
        }

        const [user, product] = await Promise.all([
            User.findById(userId),
            Product.findOne({ productNr })
        ]);

        if (!user) return res.status(404).json({ error: "User not found" });
        if (!product) return res.status(404).json({ error: `Product with number ${productNr} not found` });

        // Find existing product in cart
        const existingIndex = user.products.findIndex(
            p => p.product?.toString() === product._id.toString()
        );

        if (existingIndex >= 0) {
            // Produkt existiert bereits - Menge erhöhen
            user.products[existingIndex].amount += amount;
        } else {
            // Neues Produkt hinzufügen
            user.products.push({ product: product._id, amount });
        }

        await user.save();

        // Erfolgsresponse mit vollständigen Daten
        const result = await User.findById(userId)
            .populate({
                path: "products.product",
                model: "Product",
                select: "productNr name price category"
            });

        res.json({
            success: true,
            user: result,
            action: existingIndex >= 0 ? "quantity_updated" : "product_added"
        });

    } catch (err) {
        handleError(res, err, "POST add-product");
    }
});

// PATCH update product amount in cart by productNr
router.patch("/:userId/update-product", async (req, res) => {
    const { productNr, amount } = req.body;
    const { userId } = req.params;

    try {
        // Validierung
        if (!productNr || amount === undefined || isNaN(amount)) {
            return res.status(400).json({
                error: "Invalid input",
                details: {
                    productNr: "Required, must be a number",
                    amount: "Required, must be a number"
                }
            });
        }

        const [user, product] = await Promise.all([
            User.findById(userId),
            Product.findOne({ productNr })
        ]);

        if (!user) return res.status(404).json({ error: "User not found" });
        if (!product) return res.status(404).json({ error: `Product with number ${productNr} not found` });

        const productIndex = user.products.findIndex(
            p => p.product?.toString() === product._id.toString()
        );

        if (productIndex === -1) {
            return res.status(404).json({
                error: "Product not in cart",
                productNr: productNr
            });
        }

        // Menge aktualisieren
        user.products[productIndex].amount = amount;
        await user.save();

        // Erfolgsresponse
        const result = await User.findById(userId)
            .populate({
                path: "products.product",
                model: "Product",
                select: "productNr name price category"
            });

        res.json({
            success: true,
            user: result,
            updatedProduct: {
                productNr: productNr,
                newAmount: amount
            }
        });

    } catch (err) {
        handleError(res, err, "PATCH update-product");
    }
});